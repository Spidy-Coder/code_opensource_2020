# -*- coding: utf-8 -*-
"""Copy of Matplotlib_tutorials.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qdf5HHrGM7EZnnBDjDUzPAOA9PL0iwwK
"""

import matplotlib.pyplot as plt
import matplotlib as mpl

plt.style.use("classic")

import numpy as np
x = np.linspace(0,10,100)

fig = plt.figure()
plt.plot(x, np.sin(x), "-")
plt.plot(x,np.cos(x), "--")
plt.show()

plt.figure()

plt.subplot(2,1,1)
plt.plot(x, np.sin(x))

plt.subplot(2,1,2)
plt.plot(x, np.cos(x))

fig, ax = plt.subplots(2)

ax[0].plot(x, np.sin(x))
ax[1].plot(x, np.cos(x))

"""##Adjusting axes limits"""

plt.style.use("seaborn-whitegrid")

fig = plt.figure()
ax = plt.axes()

x = np.linspace(0,10,1000)
plt.plot(x, np.sin(x))

plt.xlim(-1,11)
plt.ylim(-1.5, 1.5)

#lets try this

plt.plot(x,np.sin(x))
plt.xlim(10,0)
plt.ylim(1.2, -1.2)

# lets make our past two code lines smaller 

plt.plot(x, np.sin(x))
plt.axis([-1, 11, -1.5, 1.5])   # parameters:- plt.axis([xmin, xmax, ymin, ymax])

#plt.axis() more uses

plt.plot(x, np.sin(x))
plt.axis("tight")   # it starts your graph from beginning and having an equal aspect ratio

plt.plot(x, np.sin(x))
plt.axis("equal") # "equal" will give equal axis distribution above an below the graph at y-axis

# for full documentation of plt.axis() method, refer plt.axis() docstring  or  simply  write

plt.axis?

"""## Scatter plots"""

import matplotlib.pyplot as plt
import numpy as np

plt.style.use("seaborn-whitegrid")

x = np.linspace(0,10,30)
y = np.sin(x)

plt.plot(x, y, "o", color = "black")

rng = np.random.RandomState(0)
for marker in ["o", ".", ",","x", "+", "v","^","<",">","s","d"]:
  plt.plot(rng.rand(5), rng.rand(5), marker,
           label = "marker = '{0}'".format(marker))
  
plt.legend(numpoints = 1)
plt.xlim(0,1.8)

plt.plot(x,y, "-ok")

plt.plot(x,y, "-p", color = "gray",
         markersize = 15, linewidth = 4,
         markerfacecolor = "white",
         markeredgecolor = "gray",
         markeredgewidth = 2)
plt.ylim(-1.2, 1.2)

"""## Scatter plots with plt.scatter"""

plt.scatter(x, y, marker = "o")

rng = np.random.RandomState(0)
x = rng.rand(100)
y = rng.rand(100)
colors = rng.rand(100)
sizes = 1000 * rng.rand(100)

plt.scatter(x,y, c = colors, s = sizes, alpha = 0.3,
            cmap = "viridis")
plt.colorbar()

"""##Basic Error bars"""

import numpy as np
import matplotlib.pyplot as plt
plt.style.use("seaborn-whitegrid")

x = np.linspace(0,10,40)
y = np.sin(x)
error = 0.4

plt.errorbar(x, y, yerr = error, fmt = ".k")

# lets make it more attractive:-

plt.errorbar(x,y, yerr = error, fmt = "o", ecolor = "lightgray", elinewidth = 3,capsize = 2)

"""## Density and Contour Plots"""

import matplotlib.pyplot as plt
import numpy as np

plt.style.use("seaborn-whitegrid")

def f(x,y):
  return np.sin(x) ** 10 + np.cos(10 + y*x) * np.cos(x)

x = np.linspace(0,5,50)
y = np.linspace(0,5,40)

X,Y = np.meshgrid(x,y)
Z = f(X,Y)

plt.contour(X,Y,Z,colors = "black")

plt.contour(X,Y,Z,20, cmap = "RdGy")

plt.contourf(X,Y,Z,20, cmap = "RdGy")
plt.colorbar()

plt.imshow(Z, extent = [0,5,0,5], origin = "lower",
           cmap = "RdGy")

plt.colorbar()
plt.axis(aspect = "image")

contours = plt.contour(X,Y,Z, 3, colors = "black")
plt.clabel(contours, inline = True, fontsize = 8)

plt.imshow(Z, extent = [0,5,0,5], origin = "lower",
           cmap = "RdGy", alpha = 0.5)

plt.colorbar()

"""## Histrograms, Binnings, and Density"""

import numpy as np
import matplotlib.pyplot as plt
plt.style.use("seaborn-white")

data = np.random.randn(1000)

plt.hist(data)

plt.hist(data, bins = 30,
         alpha = 0.6, histtype = "stepfilled", color = "steelblue",
         edgecolor = "k")

x1 = np.random.normal(0,0.8,1000)
x2 = np.random.normal(-2,1,1000)
x3 = np.random.normal(3,2,1000)

kwargs = dict(histtype = "stepfilled", alpha = 0.3, normed = True, bins = 40)

plt.hist(x1, **kwargs)

"""## Two-Dimentional Histograms and Binnings

###1) plt.hist2d
"""

mean = [0,0]
cov = [[1,1],[1,2]]
x,y = np.random.multivariate_normal(mean, cov, 10000).T

plt.hist2d(x,y,bins=30, cmap = "Blues")
cb = plt.colorbar()
cb.set_label("counts in bin")

"""###2) plt.hexbin:Hexagonal binnings"""

plt.hexbin(x,y, gridsize = 30, cmap = "Blues")
cb = plt.colorbar(label = "count in bin")

"""## Customizing Plot Legends"""

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0,10,1000)
fig,ax = plt.subplots()
ax.plot(x, np.sin(x), "b", label = "Sine")
ax.plot(x, np.cos(x), "--r", label = "Cosine")
ax.axis("equal")
leg = ax.legend()

ax.legend(loc = "upper left", frameon = True)
fig

ax.legend(frameon = False, loc = "lower center", ncol = 2)
fig

ax.legend(fancybox = True, framealpha = 1, shadow = True, borderpad = 1)
fig

import matplotlib.pyplot as plt
plt.style.use("classic")
import numpy as np

x = np.linspace(0,10,1000)
I = np.sin(x) * np.cos(x[:,np.newaxis])

plt.imshow(I)
plt.colorbar()

plt.imshow(I, cmap = "gray")

"""## Discrete colorbars"""

plt.imshow(I, cmap = plt.cm.get_cmap("Blues", 6))
plt.colorbar()
plt.clim(-1,1)

"""## Multiple Subplots"""

import matplotlib.pyplot as plt
  import numpy as np
  plt.style.use("seaborn-white")

"""### 1) plt.axes:Subplots by Hand"""

ax1 = plt.axes()   #standard axes
ax2 = plt.axes([0.65,0.65,0.2,0.2])



fig = plt.figure()
ax1 = fig.add_axes([0.1,0.5,0.8,0.4],
                   ylim = (-1.2,1.2))
ax2 = fig.add_axes([0.1,0.1,0.8,0.4],
                   ylim = (-1.2,1.2))
x = np.linspace(0,10)
ax1.plot(np.sin(x))
ax2.plot(np.cos(x))

"""### 2) plt.subplot:Simple Grids of subplots"""

for i in range(1,7):
  plt.subplot(2,3,i)
  plt.text(0.5,0.5,str((2,3,i)),
           fontsize = 18,ha = "center")

fig = plt.figure()
fig.subplots_adjust(hspace = 0.6, wspace = 0.6)
for i in range(1,7):
  ax = fig.add_subplot(2,3,i)
  ax.text(0.5,0.5,str((2,3,i)),
          fontsize = 18, ha = "center")

"""### 3) plt.subplots: The whole grid in one go"""

fig,ax = plt.subplots(2,3,sharex = "col",sharey = "row")

for i in range(2):
  for j in range(3):
    ax[i,j].text(0.5,0.5,str((i,j)),
                 fontsize = 18, ha = "center")
    
fig

"""### 3)plt.GridSpec:More Complicated Arrangements"""

import matplotlib.pyplot as plt
import numpy as np
plt.style.use("seaborn-white")

grid = plt.GridSpec(2,3,wspace = 0.5,hspace = 0.5)
plt.subplot(grid[0,0])
plt.subplot(grid[0,1:])
plt.subplot(grid[1,:2])
plt.subplot(grid[1,2])

mean = [0,0]
cov = [[1,1],[1,2]]
x,y = np.random.multivariate_normal(mean,cov,3000).T

fig = plt.figure(figsize = (6,6))
grid = plt.GridSpec(4,4,hspace = 0.2,wspace = 0.2)
main_ax = fig.add_subplot(grid[:-1,1:])
y_hist = fig.add_subplot(grid[:-1,0], xticklabels = [],
                         sharey = main_ax)
x_hist = fig.add_subplot(grid[-1,1:],yticklabels = [],
                         sharex = main_ax)

main_ax.plot(x, y, 'ok', markersize=3, alpha=0.2)
# histogram on the attached axes
x_hist.hist(x, 40, histtype='stepfilled',
orientation='vertical', color='gray')
x_hist.invert_yaxis()

y_hist.hist(y, 40, histtype='stepfilled',
orientation='horizontal', color='gray')
y_hist.invert_xaxis()

"""## Texts and Text Position"""

plt.style.use("seaborn-whitegrid")

fig,ax = plt.subplots(facecolor = "lightgray")
ax.axis([0,10,0,10])

ax.text(1,5,".Data:(1,5)", transform = ax.transData)



"""## Arrows and Annotation"""

import matplotlib.pyplot as plt
import numpy as np

plt.style.use("seaborn-whitegrid")

fig,ax = plt.subplots()

x = np.linspace(0,20,1000)
ax.plot(x, np.sin(x))
ax.axis("equal")

ax.annotate("local maximum", xytext = (10,4),
            xy = (6.28,1), arrowprops = dict(facecolor  =  "black", shrink  =  0.05))

ax.annotate("local minimum", xytext = (2,-6),
            xy = (5*np.pi,-1),
            arrowprops = dict(arrowstyle = "->",
                              connectionstyle = "angle3,angleA = 0,angleB = -90"))



"""## Customizing Ticks

### Major and Minor ticks
"""

import matplotlib.pyplot as plt
import numpy as np
plt.style.use("seaborn-whitegrid")

ax = plt.axes(xscale = "log", yscale = "log")

"""### Hiding Ticks or labels"""

ax = plt.axes()
ax.plot(np.random.rand(50))

ax.yaxis.set_major_locator(plt.NullLocator())
ax.xaxis.set_major_formatter(plt.NullFormatter())

"""### Plot Customization by Hand"""

import matplotlib.pyplot as plt
import numpy as np
plt.style.use("classic")

x = np.random.randn(1000)
plt.hist(x)

ax = plt.axes(axisbg = "#E6E6E6")
ax.set_axisbelow(True)

plt.grid(color = "w", linestyle = "solid")

for spine in ax.spines.values():
  spine.set_visible(False)



"""## Plot customization by hands"""

import matplotlib.pyplot as plt
import numpy as np
plt.style.use("classic")

x = np.random.rand(1000)
plt.hist(x)

ax = plt.axes(axisbg = "#E6E6E6")
ax.set_axisbelow(True)

plt.grid(color = "w", linestyle = "solid")

for spine in ax.spines.values():
  spine.set_visible(False)

ax.xaxis.tick_bottom(True)
ax.yaxis.tick_left(True)

ax.tick_params(colors = "gray", direction = "out")

for tick in ax.get_xticklabels():
  ax.set_color("gray")

for tick in ax.get_yticklabels():
  tick.set_color("gray")

ax.hist(x, edgecolor = "#E6E6E6", color = "#E6E6E6")

from matplotlib import cycler
colors = cycler('color',
['#EE6666', '#3388BB', '#9988DD',
'#EECC55', '#88BB44', '#FFBBBB'])
plt.rc('axes', facecolor='gray', edgecolor='Blue',
axisbelow=True, grid=True, prop_cycle=colors)
plt.rc('grid', color='w', linestyle='solid')
plt.rc('xtick', direction='out', color='gray')
plt.rc('ytick', direction='out', color='gray')
plt.rc('patch', edgecolor='#E6E6E6')
plt.rc('lines', linewidth=5)

plt.hist(x)

for i in range(5):
  plt.plot(np.random.rand(10))

import matplotlib.pyplot as plt
import numpy as np

plt.style.available[:5]

def hist_and_lines():
  np.random.seed(0)
  fig,ax = plt.subplots(1,2, figsize = (11,4))
  ax[0].hist(np.random.rand(1000))
  for i in range(3):
    ax[1].plot(np.random.rand(10))
  ax[1].legend(["a","b","c"], loc = "lower left")

plt.style.use("default")
hist_and_lines()

with plt.style.context("fivethirtyeight"):
  hist_and_lines()

with plt.style.context("ggplot"):
  hist_and_lines()

with plt.style.context("bmh"):
  hist_and_lines()

with plt.style.context("dark_background"):
  hist_and_lines()

with plt.style.context("grayscale"):
  hist_and_lines()

import seaborn
hist_and_lines()



"""## Three dimentional plotting in matplotlib"""

from mpl_toolkits import mplot3d

import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()
ax = plt.axes(projection = "3d")



"""## Three-dimentional points and lines"""

ax = plt.axes(projection = "3d")

zline = np.linspace(0,15,1000)
xline = np.sin(zline)
yline = np.cos(zline)
ax.plot(xline,yline,zline, "gray")

zdata = 15 * np.random.random(100)
xdata = np.sin(zdata) + 0.1 * np.random.randn(100)
ydata = np.cos(zdata) + 0.1 * np.random.randn(100)

ax.scatter3D(xdata,ydata,zdata, c = zdata, cmap = "Greens")

import matplotlib.pyplot as plt
import numpy as np

def f(x,y):
  return np.sin(np.sqrt(x **2 + y **2))

x = np.linspace(-6,6,30)
y = np.linspace(-6,6,30)

X,Y = np.meshgrid(x,y)

Z = f(X,Y)

fig = plt.figure()

ax1 = fig.add_subplot(1,3,1,projection = "3d")
ax1.contour3D(X,Y,Z, 50, cmap = "RdGy")
ax1.set_xlabel("x")
ax1.set_ylabel("y")
ax1.set_zlabel("z")

ax2 = fig.add_subplot(1,3,2, projection = "3d")
ax2.contour3D(X,Y,Z, 50, cmap = "binary")
ax2.set_xlabel("x")
ax2.set_ylabel("y")
ax2.set_zlabel("z")

ax3 = fig.add_subplot(1,3,3, projection = "3d")
ax3.contour3D(X,Y,Z, 50, cmap = "binary")
ax3.view_init(60,40)     #to change viewing angle of your plot
ax3.set_xlabel("x")
ax3.set_ylabel("y")
ax3.set_zlabel("z")

fig.tight_layout()

fig = plt.figure()
ax = plt.axes(projection = "3d")
ax.plot_wireframe(X,Y,Z,color = "black")
ax.set_title("wireframe")



ax = plt.axes(projection = "3d")
ax.plot_surface(X,Y,Z, rstride = 1,
                cstride = 1,cmap = "viridis"
                ,edgecolor = "none")
ax.set_title("Surface")

r = np.linspace(0, 6, 20)
theta = np.linspace(-0.9 * np.pi, 0.8 * np.pi, 40)
r, theta = np.meshgrid(r, theta)
X = r * np.sin(theta)
Y = r * np.cos(theta)
Z = f(X, Y)
ax = plt.axes(projection='3d')
ax.plot_surface(X, Y, Z, rstride=1, cstride=1,
cmap='viridis', edgecolor='none');

"""## Base maps"""

!pip install basemap

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap

plt.figure(figsize = ())

"""# Visualization with Seaborn"""

import matplotlib.pyplot as plt
import numpy as np
plt.style.use("classic")
import pandas as pd

rng = np.random.RandomState(0)
x = np.linspace(0,10,500)
y = np.cumsum(rng.randn(500,6),0)

plt.plot(x,y)
plt.legend("ABCDEF", ncol = 2,loc = "upper left")

import seaborn as sns
sns.set()

plt.plot(x,y)
plt.legend("ABCDEF",ncol = 2,loc = "upper left")

data = np.random.multivariate_normal([0,0],[[5,2],[2,2]],size = 2000 )
data = pd.DataFrame(data, columns = ["x","y"])

for col in "xy":
  plt.hist(data[col], alpha = 0.5)

print(data)

for col in "xy":
  sns.kdeplot(data[col], shade = True)

with sns.axes_style('white'):
  sns.jointplot("x", "y", data, kind='kde')

